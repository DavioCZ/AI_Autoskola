import fs from "fs/promises";
import { glob } from "glob"; // Import glob
import fetch from "node-fetch";
import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from "dotenv";
dotenv.config();

if (!process.env.GEMINI_API_KEY) {
  console.error("‚ùå  Chyb√≠ GEMINI_API_KEY v .env"); process.exit(1);
}
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
// Pozn√°mka: Jakmile Google uvoln√≠ novƒõj≈°√≠ modely, nap≈ô. "gemini-2.5-pro-vision",
// staƒç√≠ tento identifik√°tor modelu aktualizovat zde.
const vision = genAI.getGenerativeModel({ model: "gemini-1.5-pro-vision-preview" });

const SYSTEM_PROMPT = `
Jsi "Vizualiz√°tor provozu - Auto≈°kola B". Tv√Ωm √∫kolem je na z√°kladƒõ poskytnut√©ho vizu√°ln√≠ho materi√°lu a dat vytvo≈ôit co nejp≈ôesnƒõj≈°√≠, strukturovan√Ω a objektivn√≠ popis dopravn√≠ situace ve form√°tu JSON.
UPOZORNƒöN√ç: P≈òEDCHOZ√ç ANAL√ùZA SELHALA!
P≈ôedchoz√≠ anal√Ωza kriticky selhala, proto≈æe nespr√°vnƒõ identifikovala sv√≠t√≠c√≠ ƒåERVEN√â svƒõtlo na ≈æelezniƒçn√≠m p≈ôejezdu jako b√≠l√©. Tato chyba je fat√°ln√≠, proto≈æe zcela obrac√≠ v√Ωznam dopravn√≠ situace (ze "St≈Øj!" na "Volno"). Je tvoj√≠ absolutn√≠ prioritou, aby se tato chyba ji≈æ nikdy neopakovala. K tomu slou≈æ√≠ n√°sleduj√≠c√≠, nov√° a z√°vazn√° metodika.
NOV√Å, ABSOLUTNƒö Z√ÅSADN√ç METODIKA PRO ANAL√ùZU SVƒöTELN√ùCH SIGN√ÅL≈Æ
Pro ka≈æd√Ω svƒõteln√Ω sign√°l (semafor, p≈ôejezdov√© za≈ô√≠zen√≠) MUS√ç≈† PROV√âST N√ÅSLEDUJ√çC√ç T≈ò√çKROKOV√ù VIZU√ÅLN√ç AUDIT:
KROK 1: IDENTIFIKACE FYZICK√âHO ZA≈ò√çZEN√ç
Popi≈° samotn√© za≈ô√≠zen√≠. Z ƒçeho se skl√°d√°? (nap≈ô. "ƒåern√° sk≈ô√≠≈à se dvƒõma ƒçerven√Ωmi ƒçoƒçkami naho≈ôe a jednou b√≠lou ƒçoƒçkou dole.") Tento popis pom≈Ø≈æe ukotvit tv√© pozorov√°n√≠.
KROK 2: AUDIT JEDNOTLIV√ùCH SVƒöTEL (NEJD≈ÆLE≈ΩITƒöJ≈†√ç KROK)
Toto je nejd≈Øle≈æitƒõj≈°√≠ krok. Pro ka≈ædou jednotlivou ƒçoƒçku/≈æ√°rovku na za≈ô√≠zen√≠ proveƒè samostatn√© hodnocen√≠:
Je toto svƒõtlo ZAPNUT√â nebo VYPNUT√â?
Pokud je ZAPNUT√â, jakou m√° BARVU? (ƒåerven√°, zelen√°, oran≈æov√°, b√≠l√°?)
Pokud je ZAPNUT√â, je jeho svit P≈òERU≈†OVAN√ù (blik√°) nebo NEP≈òERU≈†OVAN√ù (sv√≠t√≠)?
V√Ωsledek tohoto detailn√≠ho auditu zap√≠≈°e≈° do pole popis_svetel. JE ZAK√ÅZ√ÅNO tento krok p≈ôeskoƒçit nebo si stav dom√Ω≈°let.
KROK 3: SYNT√âZA CELKOV√âHO STAVU
TEPRVE POT√â, co jsi dokonƒçil podrobn√Ω audit v Kroku 2, m≈Ø≈æe≈° z tƒõchto d√≠lƒç√≠ch zji≈°tƒõn√≠ odvodit celkov√Ω stav za≈ô√≠zen√≠.
Nap≈ô√≠klad: "Na z√°kladƒõ faktu, ≈æe jedno ƒçerven√© svƒõtlo sv√≠t√≠ nep≈ôeru≈°ovanƒõ a ostatn√≠ svƒõtla jsou vypnut√°, je souhrnn√Ωm stavem sign√°l 'St≈Øj!'."
Tento proces (IDENTIFIKUJ -> AUDITUJ KA≈ΩDOU ≈Ω√ÅROVKU -> SHRNUJ) je povinn√Ω a nesm√≠ b√Ωt nikdy obejit.
Metodika pro anal√Ωzu svisl√Ωch dopravn√≠ch znaƒçek
(Z≈Øst√°v√° v platnosti, viz p≈ôedchoz√≠ verze: 1. Vizu√°ln√≠ anal√Ωza, 2. Porovn√°n√≠ s referenƒçn√≠m obrazcem, 3. Identifikace)
Referenƒçn√≠ obrazec: https://www.dopravniznacenikross.cz/img/svisle-znaceni-kross-2000.jpg
V√Ωstupn√≠ form√°t (JSON)
Tv√Ωm v√Ωstupem mus√≠ b√Ωt V≈ΩDY validn√≠ JSON objekt. Dodr≈æuj p≈ôesnƒõ tuto strukturu, vƒçetnƒõ nov√© struktury pro svetelne_signaly.
Generated json
{
  "id_otazky": null,
  "shrnuti": "Statick√Ω pohled na ≈æelezniƒçn√≠ p≈ôejezd, kter√Ω je uzav≈ôen√Ω a d√°v√° svƒõteln√Ωm za≈ô√≠zen√≠m sign√°l 'St≈Øj!'.",
  "akteri": [],
  "znaceni_a_zarizeni": {
    "svisle": [
      {
        "vizualni_popis": {
          "tvar": "K≈ô√≠≈æ ve tvaru 'X' se ≈ælut√Ωm reflexn√≠m povrchem",
          "barva": "≈Ωlut√° s ƒçerven√Ωm okrajem",
          "symbol": "Dva zk≈ô√≠≈æen√© tr√°my"
        },
        "kod_nazev": "A 32a, V√Ωstra≈æn√Ω k≈ô√≠≈æ pro ≈æelezniƒçn√≠ p≈ôejezd jednokolejn√Ω",
        "umisteni": "Na sloupku svƒõteln√©ho signalizaƒçn√≠ho za≈ô√≠zen√≠, po obou stran√°ch p≈ôejezdu"
      }
    ],
    "vodorovne": [
      {
        "vizualni_popis": {
          "tvar": "Pod√©ln√° ƒç√°ra",
          "barva": "B√≠l√°",
          "symbol": "Nep≈ôeru≈°ovan√° (pln√°) ƒç√°ra"
        },
        "kod_nazev": "V 1a, Pod√©ln√° ƒç√°ra souvisl√°",
        "umisteni": "Na prav√©m okraji vozovky"
      },
      {
        "vizualni_popis": {
            "tvar": "P≈ô√≠ƒçn√° ƒç√°ra",
            "barva": "B√≠l√°",
            "symbol": "Dvƒõ rovnobƒõ≈æn√© p≈ôeru≈°ovan√© ƒç√°ry a symbol k≈ô√≠≈æe"
        },
        "kod_nazev": "V 8, ≈Ωelezniƒçn√≠ p≈ôejezd",
        "umisteni": "P≈ôed ≈æelezniƒçn√≠m p≈ôejezdem"
      }
    ],
    "svetelne_signaly": [
      {
        "typ": "Svƒõteln√© zabezpeƒçovac√≠ za≈ô√≠zen√≠ pro ≈æelezniƒçn√≠ p≈ôejezd (PZS) se z√°vorami",
        "popis_svetel": [
          "Na lev√©m i prav√©m za≈ô√≠zen√≠ je vidƒõt, ≈æe jedno horn√≠ ƒçerven√© svƒõtlo je ZAPNUT√â a sv√≠t√≠ nep≈ôeru≈°ovanƒõ.",
          "Druh√© horn√≠ ƒçerven√© svƒõtlo na obou za≈ô√≠zen√≠ch je VYPNUT√â.",
          "P≈ô√≠padn√© b√≠l√© svƒõtlo je VYPNUT√â."
        ],
        "souhrnny_stav": "Sign√°l 'St≈Øj!'. Jedno ƒçerven√© svƒõtlo nep≈ôeru≈°ovanƒõ sv√≠t√≠."
      }
    ]
  },
  "detailni_popis": {
    "typ": "obrazek",
    "popis": "Z√°bƒõr zachycuje pohled na ≈æelezniƒçn√≠ p≈ôejezd p≈ôes silnici vedouc√≠ otev≈ôenou krajinou. P≈ôejezd je vybaven z√°vorami a svƒõteln√Ωm signalizaƒçn√≠m za≈ô√≠zen√≠m po obou stran√°ch vozovky. Z√°vory jsou v doln√≠, uzav≈ôen√© poloze a blokuj√≠ pr≈Øjezd p≈ôes koleje. Na svƒõteln√Ωch za≈ô√≠zen√≠ch je aktivn√≠ sign√°l 'St≈Øj!', co≈æ je indikov√°no jedn√≠m sv√≠t√≠c√≠m ƒçerven√Ωm svƒõtlem. Pod svƒõtly je viditeln√Ω n√°pis 'POZOR VLAK'. Vozovka je such√°, viditelnost je dobr√°, obloha je zata≈æen√°."
  },
  "poznatky_relevantni_k_odpovedim": [],
  "mozna_rizika_a_konflikty": [
    "Pokus o objet√≠ nebo podjet√≠ sklopen√Ωch z√°vor.",
    "Selh√°n√≠ brzd vozidla bl√≠≈æ√≠c√≠ho se k uzav≈ôen√©mu p≈ôejezdu."
  ]
}
`.trim();

// const out = []; // This variable is unused globally after processFile was introduced.

async function encodeMedia(url) {
  if (!url) return null;
  console.log(`üîÑ Stahuji a k√≥duji: ${url}`);
  const res = await fetch(url);
  if (!res.ok) throw new Error(`Fetch ${url} ‚Üí ${res.status} ${res.statusText}`);
  const buf = Buffer.from(await res.arrayBuffer());
  const mime = url.endsWith(".mp4") ? "video/mp4"
           : url.match(/\.jpe?g$/i) ? "image/jpeg"  // Corrected regex
           : url.match(/\.png$/i)   ? "image/png"   // Corrected regex
           : "application/octet-stream"; // Fallback MIME type
  console.log(`‚úÖ M√©dium zak√≥dov√°no: ${url} (MIME: ${mime})`);
  return { mimeType: mime, data: buf.toString("base64") };
}

async function processFile(filePath) {
  console.log(`‚ÑπÔ∏è  Zpracov√°v√°m soubor: ${filePath}`);
  let rawData;
  try {
    rawData = JSON.parse(await fs.readFile(filePath, "utf8"));
  } catch (e) {
    console.error(`‚ùå Chyba p≈ôi ƒçten√≠ nebo parsov√°n√≠ souboru ${filePath}: ${e.message}`);
    return; // Skip this file
  }

  const localOut = [];

  for (const q of rawData) {
    console.log(`üîé Analyzuji ot√°zku ID: ${q.id} ze souboru ${filePath}`);

    // Diagnostic: Sanitize question and options to ASCII
    // const sanitizedQuestion = q.otazka.replace(/[^\x00-\x7F]/g, "_");
    // const sanitizedOptions = (q.moznosti ?? []).map(opt =>
    // typeof opt === 'string' ? opt.replace(/[^\x00-\x7F]/g, "_") : opt
    // );

    const parts = [
      { text: SYSTEM_PROMPT }, // SYSTEM_PROMPT je ji≈æ .trim()
      { text: JSON.stringify({ question: q.otazka, options: q.moznosti }, null, 2) }
    ];
    // console.log("‚ÑπÔ∏è DIAGNOSTIC: Sending only SYSTEM_PROMPT to API for question ID:", q.id); // Re-enable full parts

    // hlavn√≠ obr√°zek / video
    if (q.obrazek) {
      try {
        const mediaData = await encodeMedia(q.obrazek);
        if (mediaData) parts.push({ inlineData: mediaData });
      } catch (e) {
        console.warn(`‚ö†Ô∏è  Nelze st√°hnout hlavn√≠ m√©dium ${q.obrazek} pro ot√°zku ${q.id}: ${e.message}`);
      }
    }
    // obr√°zkov√© mo≈ænosti
    for (const m of q.moznosti ?? []) {
      if (typeof m === 'string' && /^https?:\/\/.+\.(png|jpe?g|gif|mp4)$/i.test(m)) { // Opraven√Ω regex
        try {
          const mediaData = await encodeMedia(m);
          if (mediaData) parts.push({ inlineData: mediaData });
        } catch (e) {
          console.warn(`‚ö†Ô∏è  Nelze st√°hnout obr√°zkovou mo≈ænost ${m} pro ot√°zku ${q.id}: ${e.message}`);
        }
      }
    }

    try {
      // Implementace rate limitingu - pauza p≈ôed ka≈æd√Ωm API vol√°n√≠m
      console.log("‚è≥ ƒåek√°m 1.5s p≈ôed dal≈°√≠m API vol√°n√≠m (rate limit)...");
      await new Promise(resolve => setTimeout(resolve, 1500));

      const resp = await vision.generateContent({ contents: [{ role: "user", parts }] });
      if (resp && resp.response) {
        const responseText = resp.response.text();
        localOut.push({ id: q.id, analysis: responseText });
        console.log(`‚úîÔ∏è  Odpovƒõƒè pro ${q.id} p≈ôijata.`);
      } else {
        console.warn(`‚ö†Ô∏è  ≈Ω√°dn√° odpovƒõƒè od API pro ot√°zku ${q.id}.`);
        localOut.push({ id: q.id, error: "No response from API" });
      }
    } catch (e) {
      console.error(`‚ùå  Chyba API u ot√°zky ${q.id}: ${e.message}`);
      localOut.push({ id: q.id, error: e.message });
    }
  }

  const outFile = `out_${filePath.split('/').pop().replace(/\.json$/, '')}.json`;
  try {
    await fs.writeFile(outFile, JSON.stringify(localOut, null, 2));
    console.log(`‚úÖ Hotovo pro ${filePath} ‚Üí ${outFile}`);
  } catch (e) {
    console.error(`‚ùå Chyba p≈ôi z√°pisu v√Ωstupn√≠ho souboru ${outFile}: ${e.message}`);
  }
}

async function main() {
  const fileArgs = process.argv.slice(2);

  if (fileArgs.length === 0) {
    console.log("‚ÑπÔ∏è  Nezad√°n vstupn√≠ soubor ani vzor, pou≈æije se v√Ωchoz√≠ 'public/okruh1.json'");
    const defaultFile = "public/okruh1.json";
    try {
      await fs.access(defaultFile);
      await processFile(defaultFile);
    } catch (error) {
      console.error(`‚ùå V√Ωchoz√≠ soubor ${defaultFile} nebyl nalezen nebo k nƒõmu nen√≠ p≈ô√≠stup.`);
      console.log("Pou≈æit√≠: node run_vision.js <cesta_k_souboru.json> | <glob_pattern>");
      process.exit(1);
    }
  } else {
    const inputPattern = fileArgs[0];
    console.log(`‚ÑπÔ∏è  Hled√°m soubory pro vzor: ${inputPattern}`);
    const files = await glob(inputPattern, { nodir: true }); // nodir: true to exclude directories

    if (files.length === 0) {
      console.warn(`‚ö†Ô∏è  Nebyly nalezeny ≈æ√°dn√© soubory pro vzor: ${inputPattern}`);
      // Pokus√≠me se zpracovat argument jako p≈ô√≠mou cestu k souboru
      console.log(`‚ÑπÔ∏è  Zkou≈°√≠m zpracovat ${inputPattern} jako p≈ô√≠mou cestu k souboru.`);
      try {
        await fs.access(inputPattern); // Zkontroluje existenci souboru
        await processFile(inputPattern);
      } catch (error) {
        console.error(`‚ùå Soubor ${inputPattern} nebyl nalezen nebo k nƒõmu nen√≠ p≈ô√≠stup.`);
        console.log("Pou≈æit√≠: node run_vision.js <cesta_k_souboru.json> | <glob_pattern>");
      }
    } else {
      console.log(`Nalezeno ${files.length} soubor≈Ø k zpracov√°n√≠:`);
      files.forEach(file => console.log(`  - ${file}`));
      for (const file of files) {
        await processFile(file);
      }
    }
  }
}

main().catch(e => {
  console.error("‚ùå  Nastala neoƒçek√°van√° chyba v hlavn√≠m bƒõhu:", e);
  process.exit(1);
});
